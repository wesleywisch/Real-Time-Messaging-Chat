generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @map("_id")
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversationIds String[]
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String  @unique
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(uuid()) @map("_id")
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String
  isGroup       Boolean?

  messagesIds String[]
  messages    Message[]

  userIds String[]
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(uuid()) @map("_id")
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[]
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
